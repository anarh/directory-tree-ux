const dirTree = require("directory-tree");
const fs = require('fs');
const path = require('path');
const isTextPath = require('is-text-path');
const { camelCase, pascalCase } = require('change-case');
const notSupportedTemplate = 'No preview available for this file due to file size or file type';
const template = item => `// this file is autogenerated - do not edit
import SyntaxHighlighter from 'react-syntax-highlighter';
import { nightOwl } from 'react-syntax-highlighter/dist/esm/styles/hljs';

  const ${pascalCase(item.path)} = () => {
    return (
      <SyntaxHighlighter className="code" language="${item.language}" style={nightOwl} showLineNumbers>
        {\`${(item.content).replace(/`/g, "\\`").replace(/\$\{/g, "\\${")}\`}
      </SyntaxHighlighter>
    );
  };

  export default ${pascalCase(item.path)};
`;

const sortTree = (node) => {
  if ('children' in node) {
    node.children.sort((a, b) => {
      if (a.type === b.type) {
        return a.name.localeCompare(b.name);
      } else {
        return a.type === 'directory' ? -1 : 1;
      }
    });
    node.children.forEach(child => sortTree(child));
  }
  return node;
};

const callback = (item, p) => {
    item.language = 'txt';

    if (!fs.existsSync(path.resolve(path.dirname(`./src/code-behind/${item.path}`)))) {
        fs.mkdirSync(path.resolve(path.dirname(`./src/code-behind/${item.path}`)), { recursive: true });
    }

    if (!isTextPath(item.name) || item.size > 500000) {
        item.content = notSupportedTemplate;
        fs.writeFileSync(path.resolve(`./src/code-behind/${item.path}.js`), template(item));
    }
    
    if (item.size < 500000 && isTextPath(item.name)) {
        const d = fs.readFileSync(path.resolve(p));
        item.content = d.toString();
        item.language = camelCase(item.extension);
        fs.writeFileSync(path.resolve(`./src/code-behind/${item.path}.js`), template(item));
    }
};

const tree = (path = './') => dirTree(path, {
    exclude: /.gitignore|code-behind|node_modules|data\.json|directory-tree-plus-data\.js/,
    attributes: ['extension', 'size', 'type']
}, callback);

fs.writeFileSync(path.resolve('./src/data.json'), JSON.stringify(sortTree(tree()), null, 2));
